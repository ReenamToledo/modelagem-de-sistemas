// === CONFIGURA√á√ïES E CONSTANTES ===

const CONFIG = {
    THEME_KEY: "portifolio-theme", 
    //chave para usar e salvar no localStorage a prefer√™ncia do usu√°rio
    ANIMATION_DURATION: 300, //dura√ß√£o das anima√ß√µes do site (300 milissegundos)
    SCROLL_OFSET: 80 //ajusta o posicionamento da rolagem
}

// === CLASSE PRINCIPAL DO PORTIFOLIO ===
class Portifolio {
    constructor() { //construtor inicializa novos objetos
        this.init();
    }
    init(){
        this.setupEvenListeners(); //registrarOuvintes: rea√ß√£o do c√≥digo aos cliques e intera√ß√µes do usu√°rio
        this.initThemer(); //inicializa o tema do site (claro ou escuro), lendo prefer√™ncias salvas
        this.initScrollAnimations(); //Preparar as anima√ß√µes que ser√£o ativadas quando as se√ß√µes entrarem na √°rea vis√≠vel
        this.initSmoothScrolling(); // Implementar o efeito de rolagem suave
        this.initContactForm();//Configura a l√≥gica e valida√ß√£o o formul√°rio de contato para enviar feedback
        this.initTypingEffect();//Efeito visual de digita√ß√£o em destaque no topo  da p√°gina
    }
    initTheme() {
        const themeToggle = document.getElementById("theme-toggle");
        const body = document.body;
        const themeIcon = document.querySelector('.theme-icon');

        //verificar a prefer√™nca salva no sistema
        const savedTheme = localStorage.getItem(CONFIG.THEME_KEY);
        const preferDark = window.matchMedia("(prefers-color-scheme: dark)").matches;

        if (savedTheme === "dark" || (!savedTheme && preferDark)) {
            body.classList.add("dark-mode");
            themeIcon.textContent = "‚òÄÔ∏è";
        }

        themeToggle.addEventListener("click", () =>{
            body.classList.toggle("dark-mode")
            const isDark = body.classList.contains("dark-mode")

            themeIcon.textContent = isDark ? "‚òÄÔ∏è": "üåô";
            localStorage.setItem(CONFIG, THEME_KEY, isDark ? "dark": "light");

            //anima√ß√£o do √≠cone
            themeIcon.computedStyleMap.transform = "scale(0.8)";
            setTimeout(() => { //aguarda 150 ms e depois disso executo o c√≥digo
                themeIcon.style.transform = "scale(1)"; //restaurei o √≠cone no tamanho
            }, 150);
        });
    }
    initScrollAnimations() {
        const observerOptions = {
            threshold: 0.1,
            rootMargin: "0px 0px -50px 0px"
        };
    }
}
